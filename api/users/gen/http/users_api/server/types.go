// Code generated by goa v3.2.6, DO NOT EDIT.
//
// usersAPI HTTP server types
//
// Command:
// $ goa gen github.com/enkhalifapro/users-serverless/internal/users/api/design
// -o ./api/users

package server

import (
	usersapi "github.com/enkhalifapro/users-serverless/api/users/gen/users_api"
	goa "goa.design/goa/v3/pkg"
)

// AddRequestBody is the type of the "usersAPI" service "add" endpoint HTTP
// request body.
type AddRequestBody struct {
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
}

// GetResponseBody is the type of the "usersAPI" service "get" endpoint HTTP
// response body.
type GetResponseBody struct {
	Username string `form:"username" json:"username" xml:"username"`
	Password string `form:"password" json:"password" xml:"password"`
}

// AddInternalErrorResponseBody is the type of the "usersAPI" service "add"
// endpoint HTTP response body for the "InternalError" error.
type AddInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetInternalErrorResponseBody is the type of the "usersAPI" service "get"
// endpoint HTTP response body for the "InternalError" error.
type GetInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// NewGetResponseBody builds the HTTP response body from the result of the
// "get" endpoint of the "usersAPI" service.
func NewGetResponseBody(res *usersapi.User) *GetResponseBody {
	body := &GetResponseBody{
		Username: res.Username,
		Password: res.Password,
	}
	return body
}

// NewAddInternalErrorResponseBody builds the HTTP response body from the
// result of the "add" endpoint of the "usersAPI" service.
func NewAddInternalErrorResponseBody(res *goa.ServiceError) *AddInternalErrorResponseBody {
	body := &AddInternalErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetInternalErrorResponseBody builds the HTTP response body from the
// result of the "get" endpoint of the "usersAPI" service.
func NewGetInternalErrorResponseBody(res *goa.ServiceError) *GetInternalErrorResponseBody {
	body := &GetInternalErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewAddUser builds a usersAPI service add endpoint payload.
func NewAddUser(body *AddRequestBody) *usersapi.User {
	v := &usersapi.User{
		Username: *body.Username,
		Password: *body.Password,
	}

	return v
}

// NewGetPayload builds a usersAPI service get endpoint payload.
func NewGetPayload(id string) *usersapi.GetPayload {
	v := &usersapi.GetPayload{}
	v.ID = &id

	return v
}

// ValidateAddRequestBody runs the validations defined on AddRequestBody
func ValidateAddRequestBody(body *AddRequestBody) (err error) {
	if body.Username == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("username", "body"))
	}
	if body.Password == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("password", "body"))
	}
	return
}
